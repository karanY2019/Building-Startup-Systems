service: aws-node-express-dynamodb-api

frameworkVersion: '2'

custom:
  tableName: 'users-table-${self:provider.stage}'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  stage: dev
 # iam:
 #   role:
 #     statements:
 #       - Effect: Allow
 #         Action:
 #           - dynamodb:Query
 #           - dynamodb:Scan
 #           - dynamodb:GetItem
 #           - dynamodb:PutItem
 #           - dynamodb:UpdateItem
 #           - dynamodb:DeleteItem
 #         Resource:
 #           - Fn::GetAtt: [ UsersTable, Arn ]
 # environment:
  #  USERS_TABLE: ${self:custom.tableName}

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true

  feedApi:
    handler: handler.feed
    events:
      - http:
          path: /feed
          method: GET
          cors: true
          
  collabratorsApi:
    handler: handler.collabrators
    events:
      - http:
          # path: /collabrators
          # method: GET
          path: /{proxy+}
          method: ANY
          cors: true



resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
plugins:
  - serverless-offline

#- http:
          #path: /whoami
          #method: get  
