{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React from 'react';\nimport { getApolloContext } from \"../context/index.js\";\nimport { RenderPromises } from \"./RenderPromises.js\";\nexport function getDataFromTree(tree, context) {\n  if (context === void 0) {\n    context = {};\n  }\n\n  return getMarkupFromTree({\n    tree: tree,\n    context: context,\n    renderFunction: require('react-dom/server').renderToStaticMarkup\n  });\n}\nexport function getMarkupFromTree(_a) {\n  var tree = _a.tree,\n      _b = _a.context,\n      context = _b === void 0 ? {} : _b,\n      _c = _a.renderFunction,\n      renderFunction = _c === void 0 ? require('react-dom/server').renderToStaticMarkup : _c;\n  var renderPromises = new RenderPromises();\n\n  function process() {\n    var ApolloContext = getApolloContext();\n    return new Promise(function (resolve) {\n      var element = React.createElement(ApolloContext.Provider, {\n        value: __assign(__assign({}, context), {\n          renderPromises: renderPromises\n        })\n      }, tree);\n      resolve(renderFunction(element));\n    }).then(function (html) {\n      return renderPromises.hasPromises() ? renderPromises.consumeAndAwaitPromises().then(process) : html;\n    }).finally(function () {\n      renderPromises.clear();\n    });\n  }\n\n  return Promise.resolve().then(process);\n}","map":{"version":3,"sources":["../../../src/react/ssr/getDataFromTree.ts"],"names":[],"mappings":";AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,gBAAT,QAAiC,qBAAjC;AACA,SAAS,cAAT,QAA+B,qBAA/B;AAEA,OAAM,SAAU,eAAV,CACJ,IADI,EAEJ,OAFI,EAEgC;AAApC,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAAoC;;AAEpC,SAAO,iBAAiB,CAAC;AACvB,IAAA,IAAI,EAAA,IADmB;AAEvB,IAAA,OAAO,EAAA,OAFgB;AAKvB,IAAA,cAAc,EAAE,OAAO,CAAC,kBAAD,CAAP,CAA4B;AALrB,GAAD,CAAxB;AAOD;AAUD,OAAM,SAAU,iBAAV,CAA4B,EAA5B,EAOqB;MANzB,IAAI,GAAA,EAAA,CAAA,I;MACJ,EAAA,GAAA,EAAA,CAAA,O;MAAA,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,E;MAIZ,EAAA,GAAA,EAAA,CAAA,c;MAAA,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,OAAO,CAAC,kBAAD,CAAP,CAA4B,oBAA/B,GAAmD,E;AAEjE,MAAM,cAAc,GAAG,IAAI,cAAJ,EAAvB;;AAEA,WAAS,OAAT,GAAgB;AAMd,QAAM,aAAa,GAAG,gBAAgB,EAAtC;AAEA,WAAO,IAAI,OAAJ,CAAoB,UAAA,OAAA,EAAO;AAChC,UAAM,OAAO,GAAG,KAAK,CAAC,aAAN,CACd,aAAa,CAAC,QADA,EAEd;AAAE,QAAA,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,OAAP,CAAA,EAAc;AAAE,UAAA,cAAc,EAAA;AAAhB,SAAd;AAAP,OAFc,EAGd,IAHc,CAAhB;AAKA,MAAA,OAAO,CAAC,cAAc,CAAC,OAAD,CAAf,CAAP;AACD,KAPM,EAOJ,IAPI,CAOC,UAAA,IAAA,EAAI;AACV,aAAO,cAAc,CAAC,WAAf,KACH,cAAc,CAAC,uBAAf,GAAyC,IAAzC,CAA8C,OAA9C,CADG,GAEH,IAFJ;AAGD,KAXM,EAWJ,OAXI,CAWI,YAAA;AACT,MAAA,cAAc,CAAC,KAAf;AACD,KAbM,CAAP;AAcD;;AAED,SAAO,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,OAAvB,CAAP;AACD","sourcesContent":["import React from 'react';\nimport { getApolloContext } from '../context';\nimport { RenderPromises } from './RenderPromises';\n\nexport function getDataFromTree(\n  tree: React.ReactNode,\n  context: { [key: string]: any } = {}\n) {\n  return getMarkupFromTree({\n    tree,\n    context,\n    // If you need to configure this renderFunction, call getMarkupFromTree\n    // directly instead of getDataFromTree.\n    renderFunction: require('react-dom/server').renderToStaticMarkup\n  });\n}\n\nexport type GetMarkupFromTreeOptions = {\n  tree: React.ReactNode;\n  context?: { [key: string]: any };\n  renderFunction?: (\n    tree: React.ReactElement<any>,\n  ) => string | PromiseLike<string>;\n};\n\nexport function getMarkupFromTree({\n  tree,\n  context = {},\n  // The rendering function is configurable! We use renderToStaticMarkup as\n  // the default, because it's a little less expensive than renderToString,\n  // and legacy usage of getDataFromTree ignores the return value anyway.\n  renderFunction = require('react-dom/server').renderToStaticMarkup\n}: GetMarkupFromTreeOptions): Promise<string> {\n  const renderPromises = new RenderPromises();\n\n  function process(): Promise<string> {\n    // Always re-render from the rootElement, even though it might seem\n    // better to render the children of the component responsible for the\n    // promise, because it is not possible to reconstruct the full context\n    // of the original rendering (including all unknown context provider\n    // elements) for a subtree of the original component tree.\n    const ApolloContext = getApolloContext();\n\n    return new Promise<string>(resolve => {\n      const element = React.createElement(\n        ApolloContext.Provider,\n        { value: { ...context, renderPromises }},\n        tree,\n      );\n      resolve(renderFunction(element));\n    }).then(html => {\n      return renderPromises.hasPromises()\n        ? renderPromises.consumeAndAwaitPromises().then(process)\n        : html;\n    }).finally(() => {\n      renderPromises.clear();\n    });\n  }\n\n  return Promise.resolve().then(process);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}